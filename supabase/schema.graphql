scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

enum ContributorRole {
  CONTRIBUTOR
  ADMIN
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

enum Grade {
  3
  4
  3+
  4+
  5a
  5a+
  5b
  5b+
  5c
  5c+
  6a
  6a+
  6b
  6b+
  6c
  6c+
  7a
  7a+
  7b
  7b+
  7c
  7c+
  8a
  8a+
  8b
  8b+
  8c
  8c+
  9a
  9a+
  9b
  9b+
  9c
  9c+
}

enum GradeCategory {
  3
  4
  5
  6
  7
  8
  9
  None
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
  neq: JSON
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the collection"""
  deleteFromaccountsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: accountsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): accountsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromboulder_likesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: boulder_likesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): boulder_likesDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFrombouldersCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: bouldersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): bouldersDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromimagesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: imagesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): imagesDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromlinesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: linesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): linesDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFrommanagersCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: managersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): managersDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromparkingsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: parkingsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): parkingsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromsectorsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: sectorsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): sectorsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtopo_accessesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_accessesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_accessesDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtopo_contributorsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_contributorsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_contributorsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtopo_likesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_likesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_likesDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtoposCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: toposFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): toposDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtrack_ratingsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: track_ratingsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): track_ratingsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromtracksCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: tracksFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): tracksDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromwaypointsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: waypointsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): waypointsDeleteResponse!

  """Adds one or more `accountsInsertResponse` records to the collection"""
  insertIntoaccountsCollection(objects: [accountsInsertInput!]!): accountsInsertResponse

  """
  Adds one or more `boulder_likesInsertResponse` records to the collection
  """
  insertIntoboulder_likesCollection(objects: [boulder_likesInsertInput!]!): boulder_likesInsertResponse

  """Adds one or more `bouldersInsertResponse` records to the collection"""
  insertIntobouldersCollection(objects: [bouldersInsertInput!]!): bouldersInsertResponse

  """Adds one or more `imagesInsertResponse` records to the collection"""
  insertIntoimagesCollection(objects: [imagesInsertInput!]!): imagesInsertResponse

  """Adds one or more `linesInsertResponse` records to the collection"""
  insertIntolinesCollection(objects: [linesInsertInput!]!): linesInsertResponse

  """Adds one or more `managersInsertResponse` records to the collection"""
  insertIntomanagersCollection(objects: [managersInsertInput!]!): managersInsertResponse

  """Adds one or more `parkingsInsertResponse` records to the collection"""
  insertIntoparkingsCollection(objects: [parkingsInsertInput!]!): parkingsInsertResponse

  """Adds one or more `sectorsInsertResponse` records to the collection"""
  insertIntosectorsCollection(objects: [sectorsInsertInput!]!): sectorsInsertResponse

  """
  Adds one or more `topo_accessesInsertResponse` records to the collection
  """
  insertIntotopo_accessesCollection(objects: [topo_accessesInsertInput!]!): topo_accessesInsertResponse

  """
  Adds one or more `topo_contributorsInsertResponse` records to the collection
  """
  insertIntotopo_contributorsCollection(objects: [topo_contributorsInsertInput!]!): topo_contributorsInsertResponse

  """Adds one or more `topo_likesInsertResponse` records to the collection"""
  insertIntotopo_likesCollection(objects: [topo_likesInsertInput!]!): topo_likesInsertResponse

  """Adds one or more `toposInsertResponse` records to the collection"""
  insertIntotoposCollection(objects: [toposInsertInput!]!): toposInsertResponse

  """
  Adds one or more `track_ratingsInsertResponse` records to the collection
  """
  insertIntotrack_ratingsCollection(objects: [track_ratingsInsertInput!]!): track_ratingsInsertResponse

  """Adds one or more `tracksInsertResponse` records to the collection"""
  insertIntotracksCollection(objects: [tracksInsertInput!]!): tracksInsertResponse

  """Adds one or more `waypointsInsertResponse` records to the collection"""
  insertIntowaypointsCollection(objects: [waypointsInsertInput!]!): waypointsInsertResponse

  """Updates zero or more records in the collection"""
  updateaccountsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: accountsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: accountsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): accountsUpdateResponse!

  """Updates zero or more records in the collection"""
  updateboulder_likesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: boulder_likesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: boulder_likesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): boulder_likesUpdateResponse!

  """Updates zero or more records in the collection"""
  updatebouldersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: bouldersUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: bouldersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): bouldersUpdateResponse!

  """Updates zero or more records in the collection"""
  updateimagesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: imagesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: imagesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): imagesUpdateResponse!

  """Updates zero or more records in the collection"""
  updatelinesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: linesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: linesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): linesUpdateResponse!

  """Updates zero or more records in the collection"""
  updatemanagersCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: managersUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: managersFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): managersUpdateResponse!

  """Updates zero or more records in the collection"""
  updateparkingsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: parkingsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: parkingsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): parkingsUpdateResponse!

  """Updates zero or more records in the collection"""
  updatesectorsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: sectorsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: sectorsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): sectorsUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetopo_accessesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: topo_accessesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_accessesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_accessesUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetopo_contributorsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: topo_contributorsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_contributorsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_contributorsUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetopo_likesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: topo_likesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: topo_likesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): topo_likesUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetoposCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: toposUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: toposFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): toposUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetrack_ratingsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: track_ratingsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: track_ratingsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): track_ratingsUpdateResponse!

  """Updates zero or more records in the collection"""
  updatetracksCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: tracksUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: tracksFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): tracksUpdateResponse!

  """Updates zero or more records in the collection"""
  updatewaypointsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: waypointsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: waypointsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): waypointsUpdateResponse!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `accounts`"""
  accountsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: accountsFilter

    """Sort order to apply to the collection"""
    orderBy: [accountsOrderBy!]
  ): accountsConnection

  """A pagable collection of type `boulder_likes`"""
  boulder_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: boulder_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [boulder_likesOrderBy!]
  ): boulder_likesConnection

  """A pagable collection of type `boulders`"""
  bouldersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: bouldersFilter

    """Sort order to apply to the collection"""
    orderBy: [bouldersOrderBy!]
  ): bouldersConnection

  """A pagable collection of type `images`"""
  imagesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: imagesFilter

    """Sort order to apply to the collection"""
    orderBy: [imagesOrderBy!]
  ): imagesConnection

  """A pagable collection of type `lines`"""
  linesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: linesFilter

    """Sort order to apply to the collection"""
    orderBy: [linesOrderBy!]
  ): linesConnection

  """A pagable collection of type `managers`"""
  managersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: managersFilter

    """Sort order to apply to the collection"""
    orderBy: [managersOrderBy!]
  ): managersConnection

  """A pagable collection of type `parkings`"""
  parkingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: parkingsFilter

    """Sort order to apply to the collection"""
    orderBy: [parkingsOrderBy!]
  ): parkingsConnection

  """A pagable collection of type `sectors`"""
  sectorsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: sectorsFilter

    """Sort order to apply to the collection"""
    orderBy: [sectorsOrderBy!]
  ): sectorsConnection

  """A pagable collection of type `topo_accesses`"""
  topo_accessesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_accessesFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_accessesOrderBy!]
  ): topo_accessesConnection

  """A pagable collection of type `topo_contributors`"""
  topo_contributorsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_contributorsFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_contributorsOrderBy!]
  ): topo_contributorsConnection

  """A pagable collection of type `topo_likes`"""
  topo_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_likesOrderBy!]
  ): topo_likesConnection

  """A pagable collection of type `topos`"""
  toposCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: toposFilter

    """Sort order to apply to the collection"""
    orderBy: [toposOrderBy!]
  ): toposConnection

  """A pagable collection of type `track_ratings`"""
  track_ratingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: track_ratingsFilter

    """Sort order to apply to the collection"""
    orderBy: [track_ratingsOrderBy!]
  ): track_ratingsConnection

  """A pagable collection of type `tracks`"""
  tracksCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: tracksFilter

    """Sort order to apply to the collection"""
    orderBy: [tracksOrderBy!]
  ): tracksConnection

  """A pagable collection of type `waypoints`"""
  waypointsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: waypointsFilter

    """Sort order to apply to the collection"""
    orderBy: [waypointsOrderBy!]
  ): waypointsConnection
}

enum Role {
  USER
  ADMIN
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  neq: UUID
}

type accounts {
  id: UUID!
  userName: String!
  email: String!
  role: String!
  created: Datetime!
  firstName: String
  lastName: String
  country: String
  city: String
  phone: String
  birthDate: Date
  boulder_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: boulder_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [boulder_likesOrderBy!]
  ): boulder_likesConnection
  topo_contributorsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_contributorsFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_contributorsOrderBy!]
  ): topo_contributorsConnection
  topo_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_likesOrderBy!]
  ): topo_likesConnection
  toposCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: toposFilter

    """Sort order to apply to the collection"""
    orderBy: [toposOrderBy!]
  ): toposConnection
  track_ratingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: track_ratingsFilter

    """Sort order to apply to the collection"""
    orderBy: [track_ratingsOrderBy!]
  ): track_ratingsConnection
  tracksCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: tracksFilter

    """Sort order to apply to the collection"""
    orderBy: [tracksOrderBy!]
  ): tracksConnection
}

type accountsConnection {
  edges: [accountsEdge!]!
  pageInfo: PageInfo!
}

type accountsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [accounts!]!
}

type accountsEdge {
  cursor: String!
  node: accounts
}

input accountsFilter {
  id: UUIDFilter
  userName: StringFilter
  email: StringFilter
  role: StringFilter
  created: DatetimeFilter
  firstName: StringFilter
  lastName: StringFilter
  country: StringFilter
  city: StringFilter
  phone: StringFilter
  birthDate: DateFilter
}

input accountsInsertInput {
  id: UUID
  userName: String
  email: String
  role: String
  created: Datetime
  firstName: String
  lastName: String
  country: String
  city: String
  phone: String
  birthDate: Date
}

type accountsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [accounts!]!
}

input accountsOrderBy {
  id: OrderByDirection
  userName: OrderByDirection
  email: OrderByDirection
  role: OrderByDirection
  created: OrderByDirection
  firstName: OrderByDirection
  lastName: OrderByDirection
  country: OrderByDirection
  city: OrderByDirection
  phone: OrderByDirection
  birthDate: OrderByDirection
}

input accountsUpdateInput {
  id: UUID
  userName: String
  email: String
  role: String
  created: Datetime
  firstName: String
  lastName: String
  country: String
  city: String
  phone: String
  birthDate: Date
}

type accountsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [accounts!]!
}

type boulder_likes {
  boulderId: UUID!
  userId: UUID!
  created: Datetime!
  boulder: boulders
  user: accounts
}

type boulder_likesConnection {
  edges: [boulder_likesEdge!]!
  pageInfo: PageInfo!
}

type boulder_likesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulder_likes!]!
}

type boulder_likesEdge {
  cursor: String!
  node: boulder_likes
}

input boulder_likesFilter {
  boulderId: UUIDFilter
  userId: UUIDFilter
  created: DatetimeFilter
}

input boulder_likesInsertInput {
  boulderId: UUID
  userId: UUID
  created: Datetime
}

type boulder_likesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulder_likes!]!
}

input boulder_likesOrderBy {
  boulderId: OrderByDirection
  userId: OrderByDirection
  created: OrderByDirection
}

input boulder_likesUpdateInput {
  boulderId: UUID
  userId: UUID
  created: Datetime
}

type boulder_likesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulder_likes!]!
}

type boulders {
  id: UUID!
  location: String!
  name: String!
  isHighball: Boolean!
  mustSee: Boolean!
  dangerousDescent: Boolean!
  images: [String!]!
  topoId: UUID!
  boulder_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: boulder_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [boulder_likesOrderBy!]
  ): boulder_likesConnection
  topo: topos
  tracksCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: tracksFilter

    """Sort order to apply to the collection"""
    orderBy: [tracksOrderBy!]
  ): tracksConnection
}

type bouldersConnection {
  edges: [bouldersEdge!]!
  pageInfo: PageInfo!
}

type bouldersDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulders!]!
}

type bouldersEdge {
  cursor: String!
  node: boulders
}

input bouldersFilter {
  id: UUIDFilter
  location: StringFilter
  name: StringFilter
  isHighball: BooleanFilter
  mustSee: BooleanFilter
  dangerousDescent: BooleanFilter
  topoId: UUIDFilter
}

input bouldersInsertInput {
  id: UUID
  location: String
  name: String
  isHighball: Boolean
  mustSee: Boolean
  dangerousDescent: Boolean
  topoId: UUID
}

type bouldersInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulders!]!
}

input bouldersOrderBy {
  id: OrderByDirection
  location: OrderByDirection
  name: OrderByDirection
  isHighball: OrderByDirection
  mustSee: OrderByDirection
  dangerousDescent: OrderByDirection
  images: OrderByDirection
  topoId: OrderByDirection
}

input bouldersUpdateInput {
  id: UUID
  location: String
  name: String
  isHighball: Boolean
  mustSee: Boolean
  dangerousDescent: Boolean
  topoId: UUID
}

type bouldersUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [boulders!]!
}

type images {
  id: UUID!
  users: Int!
}

type imagesConnection {
  edges: [imagesEdge!]!
  pageInfo: PageInfo!
}

type imagesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [images!]!
}

type imagesEdge {
  cursor: String!
  node: images
}

input imagesFilter {
  id: UUIDFilter
  users: IntFilter
}

input imagesInsertInput {
  id: UUID
  users: Int
}

type imagesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [images!]!
}

input imagesOrderBy {
  id: OrderByDirection
  users: OrderByDirection
}

input imagesUpdateInput {
  id: UUID
  users: Int
}

type imagesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [images!]!
}

type lines {
  id: UUID!
  index: Float!
  points: [Float!]!
  forbidden: String
  hand1: String
  hand2: String
  foot1: String
  foot2: String
  imageId: UUID
  topoId: UUID!
  trackId: UUID!
  topo: topos
  track: tracks
}

type linesConnection {
  edges: [linesEdge!]!
  pageInfo: PageInfo!
}

type linesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [lines!]!
}

type linesEdge {
  cursor: String!
  node: lines
}

input linesFilter {
  id: UUIDFilter
  index: FloatFilter
  forbidden: StringFilter
  hand1: StringFilter
  hand2: StringFilter
  foot1: StringFilter
  foot2: StringFilter
  imageId: UUIDFilter
  topoId: UUIDFilter
  trackId: UUIDFilter
}

input linesInsertInput {
  id: UUID
  index: Float
  forbidden: String
  hand1: String
  hand2: String
  foot1: String
  foot2: String
  imageId: UUID
  topoId: UUID
  trackId: UUID
}

type linesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [lines!]!
}

input linesOrderBy {
  id: OrderByDirection
  index: OrderByDirection
  points: OrderByDirection
  forbidden: OrderByDirection
  hand1: OrderByDirection
  hand2: OrderByDirection
  foot1: OrderByDirection
  foot2: OrderByDirection
  imageId: OrderByDirection
  topoId: OrderByDirection
  trackId: OrderByDirection
}

input linesUpdateInput {
  id: UUID
  index: Float
  forbidden: String
  hand1: String
  hand2: String
  foot1: String
  foot2: String
  imageId: UUID
  topoId: UUID
  trackId: UUID
}

type linesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [lines!]!
}

type managers {
  id: UUID!
  name: String!
  contactName: String!
  contactPhone: String
  contactMail: String
  description: String
  address: String
  zip: Int
  city: String
  topoId: UUID!
  topo: topos
}

type managersConnection {
  edges: [managersEdge!]!
  pageInfo: PageInfo!
}

type managersDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [managers!]!
}

type managersEdge {
  cursor: String!
  node: managers
}

input managersFilter {
  id: UUIDFilter
  name: StringFilter
  contactName: StringFilter
  contactPhone: StringFilter
  contactMail: StringFilter
  description: StringFilter
  address: StringFilter
  zip: IntFilter
  city: StringFilter
  topoId: UUIDFilter
}

input managersInsertInput {
  id: UUID
  name: String
  contactName: String
  contactPhone: String
  contactMail: String
  description: String
  address: String
  zip: Int
  city: String
  topoId: UUID
}

type managersInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [managers!]!
}

input managersOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  contactName: OrderByDirection
  contactPhone: OrderByDirection
  contactMail: OrderByDirection
  description: OrderByDirection
  address: OrderByDirection
  zip: OrderByDirection
  city: OrderByDirection
  topoId: OrderByDirection
}

input managersUpdateInput {
  id: UUID
  name: String
  contactName: String
  contactPhone: String
  contactMail: String
  description: String
  address: String
  zip: Int
  city: String
  topoId: UUID
}

type managersUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [managers!]!
}

type parkings {
  id: UUID!
  spaces: Int!
  location: String!
  name: String
  description: String
  topoId: UUID!
  topo: topos
}

type parkingsConnection {
  edges: [parkingsEdge!]!
  pageInfo: PageInfo!
}

type parkingsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [parkings!]!
}

type parkingsEdge {
  cursor: String!
  node: parkings
}

input parkingsFilter {
  id: UUIDFilter
  spaces: IntFilter
  location: StringFilter
  name: StringFilter
  description: StringFilter
  topoId: UUIDFilter
}

input parkingsInsertInput {
  id: UUID
  spaces: Int
  location: String
  name: String
  description: String
  topoId: UUID
}

type parkingsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [parkings!]!
}

input parkingsOrderBy {
  id: OrderByDirection
  spaces: OrderByDirection
  location: OrderByDirection
  name: OrderByDirection
  description: OrderByDirection
  topoId: OrderByDirection
}

input parkingsUpdateInput {
  id: UUID
  spaces: Int
  location: String
  name: String
  description: String
  topoId: UUID
}

type parkingsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [parkings!]!
}

type sectors {
  id: UUID!
  index: Float!
  name: String!
  path: String!
  boulders: [UUID!]!
  topoId: UUID!
  topo: topos
}

type sectorsConnection {
  edges: [sectorsEdge!]!
  pageInfo: PageInfo!
}

type sectorsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [sectors!]!
}

type sectorsEdge {
  cursor: String!
  node: sectors
}

input sectorsFilter {
  id: UUIDFilter
  index: FloatFilter
  name: StringFilter
  path: StringFilter
  topoId: UUIDFilter
}

input sectorsInsertInput {
  id: UUID
  index: Float
  name: String
  path: String
  topoId: UUID
}

type sectorsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [sectors!]!
}

input sectorsOrderBy {
  id: OrderByDirection
  index: OrderByDirection
  name: OrderByDirection
  path: OrderByDirection
  boulders: OrderByDirection
  topoId: OrderByDirection
}

input sectorsUpdateInput {
  id: UUID
  index: Float
  name: String
  path: String
  topoId: UUID
}

type sectorsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [sectors!]!
}

type topo_accesses {
  id: UUID!
  danger: String
  difficulty: Int
  duration: Int
  steps: [String!]!
  topoId: UUID!
  topo: topos
}

type topo_accessesConnection {
  edges: [topo_accessesEdge!]!
  pageInfo: PageInfo!
}

type topo_accessesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_accesses!]!
}

type topo_accessesEdge {
  cursor: String!
  node: topo_accesses
}

input topo_accessesFilter {
  id: UUIDFilter
  danger: StringFilter
  difficulty: IntFilter
  duration: IntFilter
  topoId: UUIDFilter
}

input topo_accessesInsertInput {
  id: UUID
  danger: String
  difficulty: Int
  duration: Int
  topoId: UUID
}

type topo_accessesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_accesses!]!
}

input topo_accessesOrderBy {
  id: OrderByDirection
  danger: OrderByDirection
  difficulty: OrderByDirection
  duration: OrderByDirection
  steps: OrderByDirection
  topoId: OrderByDirection
}

input topo_accessesUpdateInput {
  id: UUID
  danger: String
  difficulty: Int
  duration: Int
  topoId: UUID
}

type topo_accessesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_accesses!]!
}

type topo_contributors {
  topo_id: UUID!
  user_id: UUID!
  role: String!
  accounts: accounts
  topos: topos
}

type topo_contributorsConnection {
  edges: [topo_contributorsEdge!]!
  pageInfo: PageInfo!
}

type topo_contributorsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_contributors!]!
}

type topo_contributorsEdge {
  cursor: String!
  node: topo_contributors
}

input topo_contributorsFilter {
  topo_id: UUIDFilter
  user_id: UUIDFilter
  role: StringFilter
}

input topo_contributorsInsertInput {
  topo_id: UUID
  user_id: UUID
  role: String
}

type topo_contributorsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_contributors!]!
}

input topo_contributorsOrderBy {
  topo_id: OrderByDirection
  user_id: OrderByDirection
  role: OrderByDirection
}

input topo_contributorsUpdateInput {
  topo_id: UUID
  user_id: UUID
  role: String
}

type topo_contributorsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_contributors!]!
}

type topo_likes {
  topoId: UUID!
  userId: UUID!
  created: Datetime!
  topo: topos
  user: accounts
}

type topo_likesConnection {
  edges: [topo_likesEdge!]!
  pageInfo: PageInfo!
}

type topo_likesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_likes!]!
}

type topo_likesEdge {
  cursor: String!
  node: topo_likes
}

input topo_likesFilter {
  topoId: UUIDFilter
  userId: UUIDFilter
  created: DatetimeFilter
}

input topo_likesInsertInput {
  topoId: UUID
  userId: UUID
  created: Datetime
}

type topo_likesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_likes!]!
}

input topo_likesOrderBy {
  topoId: OrderByDirection
  userId: OrderByDirection
  created: OrderByDirection
}

input topo_likesUpdateInput {
  topoId: UUID
  userId: UUID
  created: Datetime
}

type topo_likesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topo_likes!]!
}

type topos {
  id: UUID!
  name: String!
  status: Int!
  location: String!
  forbidden: Boolean!
  modified: Datetime!
  submitted: Datetime
  validated: Datetime
  amenities: Int!
  rockTypes: Int!
  type: Int
  description: String
  faunaProtection: String
  ethics: String
  danger: String
  cleaned: Date
  altitude: Int
  closestCity: String
  otherAmenities: String
  lonelyBoulders: [UUID!]!
  creatorId: UUID
  validatorId: UUID
  bouldersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: bouldersFilter

    """Sort order to apply to the collection"""
    orderBy: [bouldersOrderBy!]
  ): bouldersConnection
  creator: accounts
  linesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: linesFilter

    """Sort order to apply to the collection"""
    orderBy: [linesOrderBy!]
  ): linesConnection
  managersCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: managersFilter

    """Sort order to apply to the collection"""
    orderBy: [managersOrderBy!]
  ): managersConnection
  parkingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: parkingsFilter

    """Sort order to apply to the collection"""
    orderBy: [parkingsOrderBy!]
  ): parkingsConnection
  sectorsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: sectorsFilter

    """Sort order to apply to the collection"""
    orderBy: [sectorsOrderBy!]
  ): sectorsConnection
  topo_accessesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_accessesFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_accessesOrderBy!]
  ): topo_accessesConnection
  topo_contributorsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_contributorsFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_contributorsOrderBy!]
  ): topo_contributorsConnection
  topo_likesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: topo_likesFilter

    """Sort order to apply to the collection"""
    orderBy: [topo_likesOrderBy!]
  ): topo_likesConnection
  track_ratingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: track_ratingsFilter

    """Sort order to apply to the collection"""
    orderBy: [track_ratingsOrderBy!]
  ): track_ratingsConnection
  tracksCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: tracksFilter

    """Sort order to apply to the collection"""
    orderBy: [tracksOrderBy!]
  ): tracksConnection
  validator: accounts
  waypointsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: waypointsFilter

    """Sort order to apply to the collection"""
    orderBy: [waypointsOrderBy!]
  ): waypointsConnection
}

type toposConnection {
  edges: [toposEdge!]!
  pageInfo: PageInfo!
}

type toposDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topos!]!
}

type toposEdge {
  cursor: String!
  node: topos
}

input toposFilter {
  id: UUIDFilter
  name: StringFilter
  status: IntFilter
  location: StringFilter
  forbidden: BooleanFilter
  modified: DatetimeFilter
  submitted: DatetimeFilter
  validated: DatetimeFilter
  amenities: IntFilter
  rockTypes: IntFilter
  type: IntFilter
  description: StringFilter
  faunaProtection: StringFilter
  ethics: StringFilter
  danger: StringFilter
  cleaned: DateFilter
  altitude: IntFilter
  closestCity: StringFilter
  otherAmenities: StringFilter
  creatorId: UUIDFilter
  validatorId: UUIDFilter
}

input toposInsertInput {
  id: UUID
  name: String
  status: Int
  location: String
  forbidden: Boolean
  modified: Datetime
  submitted: Datetime
  validated: Datetime
  amenities: Int
  rockTypes: Int
  type: Int
  description: String
  faunaProtection: String
  ethics: String
  danger: String
  cleaned: Date
  altitude: Int
  closestCity: String
  otherAmenities: String
  creatorId: UUID
  validatorId: UUID
}

type toposInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topos!]!
}

input toposOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  status: OrderByDirection
  location: OrderByDirection
  forbidden: OrderByDirection
  modified: OrderByDirection
  submitted: OrderByDirection
  validated: OrderByDirection
  amenities: OrderByDirection
  rockTypes: OrderByDirection
  type: OrderByDirection
  description: OrderByDirection
  faunaProtection: OrderByDirection
  ethics: OrderByDirection
  danger: OrderByDirection
  cleaned: OrderByDirection
  altitude: OrderByDirection
  closestCity: OrderByDirection
  otherAmenities: OrderByDirection
  lonelyBoulders: OrderByDirection
  creatorId: OrderByDirection
  validatorId: OrderByDirection
}

input toposUpdateInput {
  id: UUID
  name: String
  status: Int
  location: String
  forbidden: Boolean
  modified: Datetime
  submitted: Datetime
  validated: Datetime
  amenities: Int
  rockTypes: Int
  type: Int
  description: String
  faunaProtection: String
  ethics: String
  danger: String
  cleaned: Date
  altitude: Int
  closestCity: String
  otherAmenities: String
  creatorId: UUID
  validatorId: UUID
}

type toposUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [topos!]!
}

type track_ratings {
  id: UUID!
  finished: Boolean!
  rating: Int!
  comment: String
  created: Datetime!
  modified: Datetime!
  topoId: UUID!
  trackId: UUID!
  authorId: UUID
  author: accounts
  topo: topos
  track: tracks
}

type track_ratingsConnection {
  edges: [track_ratingsEdge!]!
  pageInfo: PageInfo!
}

type track_ratingsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [track_ratings!]!
}

type track_ratingsEdge {
  cursor: String!
  node: track_ratings
}

input track_ratingsFilter {
  id: UUIDFilter
  finished: BooleanFilter
  rating: IntFilter
  comment: StringFilter
  created: DatetimeFilter
  modified: DatetimeFilter
  topoId: UUIDFilter
  trackId: UUIDFilter
  authorId: UUIDFilter
}

input track_ratingsInsertInput {
  id: UUID
  finished: Boolean
  rating: Int
  comment: String
  created: Datetime
  modified: Datetime
  topoId: UUID
  trackId: UUID
  authorId: UUID
}

type track_ratingsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [track_ratings!]!
}

input track_ratingsOrderBy {
  id: OrderByDirection
  finished: OrderByDirection
  rating: OrderByDirection
  comment: OrderByDirection
  created: OrderByDirection
  modified: OrderByDirection
  topoId: OrderByDirection
  trackId: OrderByDirection
  authorId: OrderByDirection
}

input track_ratingsUpdateInput {
  id: UUID
  finished: Boolean
  rating: Int
  comment: String
  created: Datetime
  modified: Datetime
  topoId: UUID
  trackId: UUID
  authorId: UUID
}

type track_ratingsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [track_ratings!]!
}

type tracks {
  id: UUID!
  index: Float!
  name: String
  description: String
  height: Int
  grade: String
  orientation: Int
  reception: Int
  anchors: Int
  techniques: Int!
  isTraverse: Boolean!
  isSittingStart: Boolean!
  mustSee: Boolean!
  hasMantle: Boolean!
  topoId: UUID!
  boulderId: UUID!
  creatorId: UUID
  boulder: boulders
  creator: accounts
  linesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: linesFilter

    """Sort order to apply to the collection"""
    orderBy: [linesOrderBy!]
  ): linesConnection
  topo: topos
  track_ratingsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: track_ratingsFilter

    """Sort order to apply to the collection"""
    orderBy: [track_ratingsOrderBy!]
  ): track_ratingsConnection
}

type tracksConnection {
  edges: [tracksEdge!]!
  pageInfo: PageInfo!
}

type tracksDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [tracks!]!
}

type tracksEdge {
  cursor: String!
  node: tracks
}

input tracksFilter {
  id: UUIDFilter
  index: FloatFilter
  name: StringFilter
  description: StringFilter
  height: IntFilter
  grade: StringFilter
  orientation: IntFilter
  reception: IntFilter
  anchors: IntFilter
  techniques: IntFilter
  isTraverse: BooleanFilter
  isSittingStart: BooleanFilter
  mustSee: BooleanFilter
  hasMantle: BooleanFilter
  topoId: UUIDFilter
  boulderId: UUIDFilter
  creatorId: UUIDFilter
}

input tracksInsertInput {
  id: UUID
  index: Float
  name: String
  description: String
  height: Int
  grade: String
  orientation: Int
  reception: Int
  anchors: Int
  techniques: Int
  isTraverse: Boolean
  isSittingStart: Boolean
  mustSee: Boolean
  hasMantle: Boolean
  topoId: UUID
  boulderId: UUID
  creatorId: UUID
}

type tracksInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [tracks!]!
}

input tracksOrderBy {
  id: OrderByDirection
  index: OrderByDirection
  name: OrderByDirection
  description: OrderByDirection
  height: OrderByDirection
  grade: OrderByDirection
  orientation: OrderByDirection
  reception: OrderByDirection
  anchors: OrderByDirection
  techniques: OrderByDirection
  isTraverse: OrderByDirection
  isSittingStart: OrderByDirection
  mustSee: OrderByDirection
  hasMantle: OrderByDirection
  topoId: OrderByDirection
  boulderId: OrderByDirection
  creatorId: OrderByDirection
}

input tracksUpdateInput {
  id: UUID
  index: Float
  name: String
  description: String
  height: Int
  grade: String
  orientation: Int
  reception: Int
  anchors: Int
  techniques: Int
  isTraverse: Boolean
  isSittingStart: Boolean
  mustSee: Boolean
  hasMantle: Boolean
  topoId: UUID
  boulderId: UUID
  creatorId: UUID
}

type tracksUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [tracks!]!
}

type waypoints {
  id: UUID!
  name: String!
  location: String!
  description: String
  topoId: UUID!
  topo: topos
}

type waypointsConnection {
  edges: [waypointsEdge!]!
  pageInfo: PageInfo!
}

type waypointsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [waypoints!]!
}

type waypointsEdge {
  cursor: String!
  node: waypoints
}

input waypointsFilter {
  id: UUIDFilter
  name: StringFilter
  location: StringFilter
  description: StringFilter
  topoId: UUIDFilter
}

input waypointsInsertInput {
  id: UUID
  name: String
  location: String
  description: String
  topoId: UUID
}

type waypointsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [waypoints!]!
}

input waypointsOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  location: OrderByDirection
  description: OrderByDirection
  topoId: OrderByDirection
}

input waypointsUpdateInput {
  id: UUID
  name: String
  location: String
  description: String
  topoId: UUID
}

type waypointsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [waypoints!]!
}
